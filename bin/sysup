#!/usr/bin/env bash

set -e

aur_user=$(grep 1000 /etc/passwd | awk --field-separator=':' '{print $1}')

[[ -z "$aur_user" ]]  && echo "No user found for aur builds" && exit;

[[ "$USER" != "root" ]] && echo "You must be root" && exit;


pac_down="pacman -Syuw"
pac_install="pacman -Su"

snap_desc="pacman upgrade"

doing_install=

if [[ -n "$*" ]]
then
    echo "Installing $* with upgrade"
    pac_down="$pac_down $*"
    pac_install="$pac_install $*"
    doing_install="y"
    snap_desc="pacman upgrade and install $*"
fi

rm -rf /tmp/aur-build

if which aurget >/dev/null 2>&1
then
    # upgrade AUR packages as well
    pac_down="($pac_down)"
    pac_install="($pac_install  && sudo -u $aur_user mkdir -p /tmp/aur /tmp/aur-build && cd /tmp/aur-build && sudo -u $aur_user PKGDEST=/tmp/aur aurget -Sbu --noedit --deps && pacman -U /tmp/aur/* && rm -rf /tmp/aur /tmp/aur-build)"
else
    echo "No \`aurget' found, not upgrading AUR packages"
fi

# upgrade and download packages only
if ! bash -c "$pac_down"
then
    echo "Upgrade cancelled, no snapshot generated"
    exit
fi

up_count=$(pacman -Sup 2> /dev/null | sed 1d | wc -l)

if [[ $up_count -lt 1 ]]
then
    if [[ "$doing_install" = "y" ]]
    then
        snap_desc="install $*"
    else
        echo "Nothing to upgrade"
        exit
    fi
fi

if which snapper >/dev/null 2>&1
then
    # do upgrade with pre and post snapshots
    snapper -c root create --command "$pac_install" --description "$snap_desc"

    # list out the snapsots afterwards
    snapper -c root list
else
    $pac_install
fi
